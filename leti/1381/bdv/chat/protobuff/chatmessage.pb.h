// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatmessage.proto

#ifndef PROTOBUF_chatmessage_2eproto__INCLUDED
#define PROTOBUF_chatmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chatmessage_2eproto();
void protobuf_AssignDesc_chatmessage_2eproto();
void protobuf_ShutdownFile_chatmessage_2eproto();

class ChatMessage;

enum ChatMessage_Command {
  ChatMessage_Command_INIT = 0,
  ChatMessage_Command_SEND = 1,
  ChatMessage_Command_DISC = 2
};
bool ChatMessage_Command_IsValid(int value);
const ChatMessage_Command ChatMessage_Command_Command_MIN = ChatMessage_Command_INIT;
const ChatMessage_Command ChatMessage_Command_Command_MAX = ChatMessage_Command_DISC;
const int ChatMessage_Command_Command_ARRAYSIZE = ChatMessage_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_Command_descriptor();
inline const ::std::string& ChatMessage_Command_Name(ChatMessage_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_Command_descriptor(), value);
}
inline bool ChatMessage_Command_Parse(
    const ::std::string& name, ChatMessage_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_Command>(
    ChatMessage_Command_descriptor(), name, value);
}
// ===================================================================

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatMessage_Command Command;
  static const Command INIT = ChatMessage_Command_INIT;
  static const Command SEND = ChatMessage_Command_SEND;
  static const Command DISC = ChatMessage_Command_DISC;
  static inline bool Command_IsValid(int value) {
    return ChatMessage_Command_IsValid(value);
  }
  static const Command Command_MIN =
    ChatMessage_Command_Command_MIN;
  static const Command Command_MAX =
    ChatMessage_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    ChatMessage_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return ChatMessage_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return ChatMessage_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return ChatMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ChatMessage.Command MsgType = 1 [default = DISC];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::ChatMessage_Command msgtype() const;
  inline void set_msgtype(::ChatMessage_Command value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* message_;
  int msgtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_chatmessage_2eproto();
  friend void protobuf_AssignDesc_chatmessage_2eproto();
  friend void protobuf_ShutdownFile_chatmessage_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatMessage

// required .ChatMessage.Command MsgType = 1 [default = DISC];
inline bool ChatMessage::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_msgtype() {
  msgtype_ = 2;
  clear_has_msgtype();
}
inline ::ChatMessage_Command ChatMessage::msgtype() const {
  return static_cast< ::ChatMessage_Command >(msgtype_);
}
inline void ChatMessage::set_msgtype(::ChatMessage_Command value) {
  assert(::ChatMessage_Command_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
}

// required string Name = 2;
inline bool ChatMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatMessage::name() const {
  return *name_;
}
inline void ChatMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChatMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Message = 3;
inline bool ChatMessage::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ChatMessage::message() const {
  return *message_;
}
inline void ChatMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ChatMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ChatMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* ChatMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatMessage_Command>() {
  return ::ChatMessage_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chatmessage_2eproto__INCLUDED
